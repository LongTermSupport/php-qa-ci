<?php

declare(strict_types=1);
//
// declare(strict_types=1);
//
// namespace LTS\PHPQA\Tests\Small\PHPUnit;
//
// use InvalidArgumentException;
// use LTS\PHPQA\PHPUnit\CheckAnnotations;
// use PHPUnit\Framework\TestCase;
//
// /**
// * Class CheckForLargeAndMediumAnnotationsTest.
// *
// * @internal
// */
// #[\PHPUnit\Framework\Attributes\CoversClass(CheckAnnotations::class)]
// #[\PHPUnit\Framework\Attributes\CoversClass(CheckAnnotations::class)]
// #[\PHPUnit\Framework\Attributes\Small]
// #[\PHPUnit\Framework\Attributes\CoversFunction('main')]
// final class CheckAnnotationsTest extends TestCase
// {
//    /**
//     * @var CheckAnnotations
//     */
//    private $checker;
//
//    public function setUp(): void
//    {
//        $this->checker = new CheckAnnotations();
//    }
//
//    #[\PHPUnit\Framework\Attributes\Test]
//    public function itThrowAnExceptionIfTestsPathIsInvalid(): void
//    {
//        $this->expectException(InvalidArgumentException::class);
//        $this->checker->main('/invalid/path');
//    }
//
//    #[\PHPUnit\Framework\Attributes\Test]
//    public function itReturnsNoErrorsIfItsAllGood(): void
//    {
//        $pathToTestsDirectory = __DIR__ . '/../../assets/phpunitAnnotations/projectAllGood/tests';
//        $expected             = [];
//        $actual               = $this->checker->main($pathToTestsDirectory);
//        self::assertSame($expected, $actual);
//    }
//
//    #[\PHPUnit\Framework\Attributes\Test]
//    public function itFindsMissingSmallAnnotations(): void
//    {
//        $pathToTestsDirectory = __DIR__ . '/../../assets/phpunitAnnotations/projectMissingSmall/tests';
//        /* CS Fixer will add the tag automatically if the file is run through QA */
//        $testFile      = $this->getSmallTestWithNoAnnotation();
//        $smallTestName = $pathToTestsDirectory . '/Small/SomethingTest.php';
//        \Safe\file_put_contents($smallTestName, $testFile);
//
//        $expected = [
//            'SomethingTest.php' => [
//                'Failed finding @small for method: itDoesSomething',
//            ],
//        ];
//        $actual = $this->checker->main($pathToTestsDirectory);
//        /* Clean up the file once we are finished with it */
//        \Safe\unlink($smallTestName);
//        self::assertSame($expected, $actual);
//    }
//
//    #[\PHPUnit\Framework\Attributes\Test]
//    public function itFindsMissingMediumAnnotations(): void
//    {
//        $pathToTestsDirectory = __DIR__ . '/../../assets/phpunitAnnotations/projectMissingMedium/tests';
//        $expected             = [
//            'SomethingTest.php' => [
//                'Failed finding @medium for method: itDoesSomething',
//            ],
//        ];
//        $actual = $this->checker->main($pathToTestsDirectory);
//        self::assertSame($expected, $actual);
//    }
//
//    #[\PHPUnit\Framework\Attributes\Test]
//    public function itFindsMissingLargeAnnotations(): void
//    {
//        $pathToTestsDirectory = __DIR__ . '/../../assets/phpunitAnnotations/projectMissingLarge/tests';
//        $expected             = [
//            'SomethingTest.php' => [
//                'Failed finding @large for method: itDoesSomething',
//                'Failed finding @large for method: testSomethingHappens',
//            ],
//        ];
//        $actual = $this->checker->main($pathToTestsDirectory);
//        self::assertSame($expected, $actual);
//    }
//
//    #[\PHPUnit\Framework\Attributes\Test]
//    public function itReturnsNoErrorsIfNotApplicableToProject(): void
//    {
//        $pathToTestsDirectory = __DIR__ . '/../../assets/phpunitAnnotations/projectNotApplicable/tests';
//        $expected             = [];
//        $actual               = $this->checker->main($pathToTestsDirectory);
//        self::assertSame($expected, $actual);
//    }
//
//    /**
//     * We need to be able to test that a file without a small annotation is picked up, however CS Fixer is adding the
//     * small tag to any test that doesn't have a size annotation.
//     *
//     * I tried to put the entire class in the heredoc, but then the CheckAnnotations tool picked it up as a false
//     * positive. Putting the class line into a var and the rest of the class in the here doc seems to work.
//     */
//    private function getSmallTestWithNoAnnotation(): string
//    {
//        $class = 'final class SomethingTest extends TestCase';
//
//        return <<<PHP
//            <?php
//
//            declare(strict_types=1);
//
//            namespace LTS\\PHPQA\\Tests\\assets\\phpunitAnnotations\\projectMissingSmall\tests\\Small;
//
//            use PHPUnit\\Framework\\TestCase;
//
//            /**
//             * @internal
//             * @coversNothing
//             */
//            {$class}
//            {
//                /**
//                 * @smaalll
//                 * @test
//                 */
//                public function itDoesSomething(): void
//                {
//                }
//            }
//            PHP;
//    }
// }
