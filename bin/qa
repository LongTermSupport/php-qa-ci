#!/usr/bin/env bash
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
cd $DIR;
set -e
set -u
set -o pipefail
standardIFS="$IFS"
IFS=$'\n\t'
echo "
===========================================
$(hostname) $0 $@
===========================================
"

#project root directory
projectRoot=$(realpath ./../../../../)

#Coding Standard for checking
codingStandardsCheckStandard=$projectRoot/vendor/squizlabs/php_codesniffer/src/Standards/PSR2

## PROCESS STARTS ##
cd $projectRoot;
mkdir -p $projectRoot/var;

# Function to run PHP without Xdebug enabled, much faster
function phpNoXdebug {
    set +x
    local temporaryPath="$(mktemp -t php.XXXX).ini"
    # Using awk to ensure that files ending without newlines do not lead to configuration error
    /usr/bin/php -i | grep "\.ini" | grep -o -e '\(/[a-z0-9._-]\+\)\+\.ini' | grep -v xdebug | xargs awk 'FNR==1{print ""}1' > "$temporaryPath"
    /usr/bin/php -n -c "$temporaryPath" "$@"
    rm -f "$temporaryPath"
    set -x
}

echo "

Checking for Composer Issues
----------------------------
"
set +e
phpNoXdebug -f $(which composer) -- diagnose
set -e

echo "

Refreshing Composer Autoloader
-----------------------------
"
phpNoXdebug -f $(which composer) -- dump-autoload

set +x
echo "
Setting Strict Types If It's Missing
-------------------------------------
"
for f in $(grep -r -L 'strict_types' $projectRoot/src);
do
    echo "Found file with no strict types:"
    echo $f;
    echo
    read -p "Would you like to fix? " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        sed -i 's/<?php/<\?php declare(strict_types=1);/g' $f;
        echo "fixed $f"
    else
        echo "skipped $f"
    fi
done


echo "

Running PHP Lint
----------------
"
set -x
phpNoXdebug -f bin/parallel-lint -- src tests bin
set +x

echo "

Running PHPStan
---------------------
"
set -x
neonConfigPath=$projectRoot/tests/phpstan.neon
neonConfig=
if [[ -f $neonConfigPath ]]
then
    neonConfig=$neonConfigPath
fi
if [[ "" != "$neonConfig" ]]
then
    phpNoXdebug -f bin/phpstan  -- analyse src tests bin -l7 -c $neonConfig
else
    phpNoXdebug -f bin/phpstan  -- analyse src tests bin -l7
fi
set +x

echo "

Running PHPUnit Tests
---------------------
"
# Note the qaQuickTests=1
# this sets a config variable of quickTests which you can then use
# to allow tests to run less thoroughly but more quickly
set -x
qaQuickTests=1 phpNoXdebug -f bin/phpunit --\
    tests/ \
    ${phpunitParams:-""}
set +x

echo "

Running PHP Mess Detector
-------------------------
"
set -x
phpNoXdebug -f bin/phpmd -- \
    src,tests,bin \
    text \
    $DIR/../phpmd/ruleset.xml \
    --suffixes php,phtml \
    | sort -u \
    | sed G \
    | sed -e 's#p:#p\nLine: #' \
    | sed -e 's#\t\{1,\}#\n#' \
    | sed -e 's#\. #\.\n#'
set +x

echo "

Checking if Uncommitted Changes
------------------------------
"
set +e
git status | grep -q "nothing to commit, working directory clean"
repoDirty=$?
set -e
if (( $repoDirty > 0 ))
then
    echo "

Untracked or Uncommited changes detected - ABORTING

"
    git status
    exit 1
fi


echo "

Running Beautifier and Fixer on src and tests
---------------------------------------------
"
set +e
set -x
phpNoXdebug -f bin/phpcbf -- \
    --standard=$codingStandardsCheckStandard \
    --colors \
    --cache=$projectRoot/var/phpcbf.cache \
    src tests bin
set +x
set -e

echo "

Running Code Sniffer on src and tests
-------------------------------------
"
set -x
phpNoXdebug -f bin/phpcs -- \
    --config-set ignore_warnings_on_exit 1
phpNoXdebug -f bin/phpcs -- \
    --standard=$codingStandardsCheckStandard \
    --colors \
    --cache=$projectRoot/var/phpcs.cache \
    -s \
    --report-full \
    --report-summary \
    src tests bin
set +x



echo << WOO

ALL TESTS PASSING

            _
           /(|
          (  :
         __\  \  _____
       (____)  `|
      (____)|   |
       (____).__|
        (___)__.|_____


WOO

echo "
Statistics:
"
phpNoXdebug -f bin/phploc src tests


echo "
===========================================
$(hostname) $0 $@ COMPLETED
===========================================
"
