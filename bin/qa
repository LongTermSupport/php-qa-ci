#!/usr/bin/env bash
###################################################################
#
# PHP QA Pipeline
#
# Usage:
#
# Standard:
# ./bin/qa
#
# Run all PHPUnit tests:
# phpUnitQuickTests=0 ./bin/qa

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
cd $DIR;
set -e
set -u
set -o pipefail
standardIFS="$IFS"
IFS=$'\n\t'
echo "
===========================================
$(hostname) $0 $@
===========================================
"

phpBinPath=$(which php)

#### FUNCTIONS #################################################

################################################################
# Get the path for a config file
# Defaults to project level and falls back to this library
#
# Usage:
#
# - relative path, falling back to the standard default config path
# `configPath "relative/path/to/file/or/folder"`
#
# - relative path, falling back to a specified default
# `configPath "relative/path/to/file/or/folder" "specified/default/path"
function configPath(){
    local relativePath="$1"
    local defaultPath="${2:-"$defaultConfigPath/$relativePath"}"
    if [[ -f $projectConfigPath/$relativePath ]]
    then
        echo $projectConfigPath/$relativePath
    else
        echo $defaultPath
    fi
}

###############################################################
# Function to run PHP without Xdebug enabled, much faster
# Usage:
# `phpNoXdebug path/to/php/file.php -- -php -args`
function phpNoXdebug {
    set +x
    local temporaryPath="$(mktemp -t php.XXXX).ini"
    # Using awk to ensure that files ending without newlines do not lead to configuration error
    $phpBinPath -i | grep "\.ini" | grep -o -e '\(/[a-z0-9._-]\+\)\+\.ini' | grep -v xdebug | xargs awk 'FNR==1{print ""}1' > "$temporaryPath"
    $phpBinPath -n -c "$temporaryPath" "$@"
    local exitCode=$?
    rm -f "$temporaryPath"
    set -x
    return $exitCode
}

#### CONFIG ##################################################

# project root directory
if [[ -d $DIR/../vendor ]]
then
    projectRoot="$(readlink -f ./../)"
else
    projectRoot="$(readlink -f ./../../../../)"
fi

# the path in the project to check for config
projectConfigPath="$projectRoot/qaConfig/"

# project tests folder
testsDir="$(find $projectRoot -maxdepth 1 -type d \( -name test -o -name tests \) | head -n1)"
if [[ "" == "$testsDir" ]]
then
    echo "


##### ERROR ############################################


You have no 'tests' or 'test' directory.

This is not currently supported by phpqa

Please create at least an empty 'tests' directory, eg:

mkdir -p $projectRoot/tests


########################################################

    "
    exit 1
fi

# project src folder
srcDir="$projectRoot/src"
if [[ "" == "$srcDir" ]]
then
    echo "


##### ERROR ############################################


You have no 'src' or directory.

This is not currently supported by phpqa

Please create at least an empty 'src' directory, eg:

mkdir -p $projectRoot/src


########################################################

    "
    exit 1
fi


# project bin dir
binDir="$(find $projectRoot -maxdepth 2 -type d -name bin | head -n1)"
if [[ "" == "$binDir" ]]
then
    echo "


##### ERROR ############################################


You have no 'bin' or directory.

This is not currently supported by phpqa

Please create at least an empty 'bin' directory, eg:

mkdir -p $projectRoot/bin


########################################################

    "
    exit 1
fi

# proeject var dir, sub directory for qa cache files and output files
varDir="$projectRoot/var/qa";

cacheDir="$projectRoot/cache/qa";

# the path in this library for default config
defaultConfigPath="$(readlink -f ./../configDefaults/)"

# PHPStan configs
phpstanConfigPath="$(configPath phpstan.neon)"

#PHP Mess Detector Configs
phpmdConfigPath="$(configPath phpmd/ruleset.xml)"

# coding Standard for checking
# checks for a folder called 'condingStandards' in the $projectConfigPath, falls back to the PSR2 standards
phpcsCodingStandardsPath=$(configPath \
    codingStandards \
    $projectRoot/vendor/squizlabs/php_codesniffer/src/Standards/PSR2
)

# should coding standards warnings be a fail?
phpcsFailOnWarning=0

##PHPUnit Configs

# PHPUnit Quick Tests - optional skip slow tests
phpUnitQuickTests=${phpUnitQuickTests:-1}

# PHPUnit Coverage - if enabled, tests will run with Xdebug and generate coverage
phpUnitCoverage=${phpUnitCoverage:-1}

if [[ -f $projectRoot/phpunit.xml ]]
then
    # Project root phpunit.xml trumps everything else
    phpUnitConfigPath=$projectRoot/phpunit.xml
else
    if [[ "1" == "$phpUnitCoverage" ]]
    then
        phpUnitConfigPath=$(configPath phpunit-with-coverage.xml)
    else
        phpUnitConfigPath=$(configPath phpunit.xml)
    fi
fi

#### PROCESS #################################################

# override configs with project configs
overridePath="$projectConfigPath/qaConfig.inc.bash"

if [[ -f "$overridePath" ]]
then
    echo "Found override config at $overridePath"
    source $overridePath
fi

cd "$projectRoot";

mkdir -p "$varDir";

mkdir -p "$cacheDir";


if [[ -f $projectConfigPath/hookPre.bash ]]
then
    echo "

Running Pre Hook $projectConfigPath/hookPre.bash
------------------------------------------------
"
    source $projectConfigPath/hookPre.bash
fi


echo "

Checking for Composer Issues
----------------------------
"
set +e
phpNoXdebug -f $(which composer) -- diagnose
set +x
set -e

echo "

Refreshing Composer Autoloader
-----------------------------
"
phpNoXdebug -f $(which composer) -- dump-autoload
set +x

echo "
Setting Strict Types If It's Missing
-------------------------------------
"
for d in "
$srcDir
$testsDir
"
do
    for f in $(
                find $d \
                    -name '*.php' \
                    -o -name '*.phtml' \
                    -exec grep -L 'strict_types' {} \;
              );
    do
        echo "Found file with no strict types:"
        echo $f;
        echo
        read -p "Would you like to fix? " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]
        then
            sed -i 's/<?php/<\?php declare(strict_types=1);/g' $f;
            echo "fixed $f"
        else
            echo "skipped $f"
        fi
    done
done

echo "

Running PHP Lint
----------------
"
phpNoXdebug -f bin/parallel-lint -- $srcDir $testsDir $binDir
set +x

echo "

Running PHPStan
---------------------
"
set +e
phpNoXdebug -f bin/phpstan  -- analyse "$srcDir" "$testsDir" "$binDir" -l7 -c "$phpstanConfigPath"
phpStanExitCode=$?
#exit code 0 = fine, 1 = ran fine but found errors, else it means it crashed
if (( $phpStanExitCode > 0 ))
then
    if (( $phpStanExitCode > 1 ))
    then
        printf "\n\n\nPHPStan Crashed....\n\nrunning again with debug mode:\n\n\n"
        phpNoXdebug -f bin/phpstan  -- analyse "$srcDir" "$testsDir" "$binDir" -l7 -c "$phpstanConfigPath" --debug
    fi
    exit $phpStanExitCode
fi
set -e
set +x

echo "

Running PHPUnit Tests
---------------------
"
# Note the qaQuickTests=1
# this sets a config variable of quickTests which you can then use
# to allow tests to run less thoroughly but more quickly

set +e
phpCmd=phpNoXdebug
if [[ "1" == "$phpUnitCoverage" ]]
then
    phpCmd=\php
fi
set -x
qaQuickTests="$phpUnitQuickTests" $phpCmd -f bin/phpunit \
    -- \
    -c $phpUnitConfigPath \
    "$testsDir"

phpunitExitCode=$?
set +x
if (( $phpunitExitCode > 0 ))
then
    if (( $phpunitExitCode > 2 ))
    then
        printf "\n\n\nPHPUnit Crashed\n\nRunning again with Debug mode...\n\n\n"
        qaQuickTests="$phpUnitQuickTests" phpNoXdebug -f bin/phpunit -- "$testsDir" --debug
    fi
    exit $phpunitExitCode
fi
set -e

echo "

Running PHP Mess Detector
-------------------------
"
set -x
phpNoXdebug -f bin/phpmd -- \
    "$srcDir","$testsDir","$binDir" \
    text \
    "$phpmdConfigPath" \
    --suffixes php,phtml \
    | sort -u \
    | sed G \
    | sed -e 's#p:#p\nLine: #' \
    | sed -e 's#\t\{1,\}#\nMessage: #' \
    | sed -e 's#\. #\.\n#'
set +x

echo "

Running Markdown Links Checker
------------------------------
"
phpNoXdebug -f bin/mdlinks

echo "

Checking if Uncommitted Changes
------------------------------
"
set +e
inGitRepo="$(git rev-parse --is-inside-work-tree 2>/dev/null)"
if [[ "" != "$inGitRepo" ]]
then
    git status | grep -Eq "nothing to commit, working .*? clean"
    repoDirty=$?
    set -e
    if (( $repoDirty > 0 ))
    then
        echo "

        Untracked or Uncommited changes detected - ABORTING

        "
        git status
        exit 1
    fi
fi





echo "

Running Beautifier and Fixer on src and tests
---------------------------------------------
"
set +e
phpNoXdebug -f bin/phpcbf -- \
    --standard="$phpcsCodingStandardsPath" \
    --colors \
    --cache="$cacheDir"/phpcbf.cache \
    "$srcDir" "$testsDir" "$binDir"
set +x
set -e

echo "

Running Code Sniffer on src and tests
-------------------------------------
"

phpNoXdebug -f bin/phpcs -- \
    --config-set ignore_warnings_on_exit "$phpcsFailOnWarning"
set +x
phpNoXdebug -f bin/phpcs -- \
    --standard="$phpcsCodingStandardsPath" \
    --colors \
    --cache="$cacheDir"/phpcs.cache \
    -s \
    --report-full \
    --report-summary \
    "$srcDir" "$testsDir" "$binDir"
set +x


echo '


###############################
#                             #
#      ALL TESTS PASSING      #
#                             #
#            _                #
#           /(|               #
#          (  :               #
#         __\  \  _____       #
#       (____)  `|            #
#      (____)|   |            #
#       (____).__|            #
#        (___)__.|_____       #
#                             #
#                             #
###############################


'

echo "
Statistics:
"
phpNoXdebug -f bin/phploc "$srcDir" "$testsDir"
set +x

if [[ -f $projectConfigPath/hookPost.bash ]]
then
    echo "

Running Post Hook $projectConfigPath/hookPost.bash
------------------------------------------------
"
    source $projectConfigPath/hookPost.bash
fi


echo "
===========================================
$(hostname) $0 $@ COMPLETED
===========================================
"
